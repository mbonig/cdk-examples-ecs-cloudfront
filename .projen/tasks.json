{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bundle": {
      "name": "bundle",
      "description": "Prepare assets",
      "steps": [
        {
          "spawn": "bundle:constructs/WebsiteStackTest/WebsiteStackTest.lambda"
        }
      ]
    },
    "bundle:constructs/WebsiteStackTest/WebsiteStackTest.lambda": {
      "name": "bundle:constructs/WebsiteStackTest/WebsiteStackTest.lambda",
      "description": "Create a JavaScript bundle from src/constructs/WebsiteStackTest/WebsiteStackTest.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/constructs/WebsiteStackTest/WebsiteStackTest.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/constructs/WebsiteStackTest/WebsiteStackTest.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/*"
        }
      ]
    },
    "bundle:constructs/WebsiteStackTest/WebsiteStackTest.lambda:watch": {
      "name": "bundle:constructs/WebsiteStackTest/WebsiteStackTest.lambda:watch",
      "description": "Continuously update the JavaScript bundle from src/constructs/WebsiteStackTest/WebsiteStackTest.lambda.ts",
      "steps": [
        {
          "exec": "esbuild --bundle src/constructs/WebsiteStackTest/WebsiteStackTest.lambda.ts --target=\"node18\" --platform=\"node\" --outfile=\"assets/constructs/WebsiteStackTest/WebsiteStackTest.lambda/index.js\" --tsconfig=\"tsconfig.dev.json\" --external:@aws-sdk/* --watch"
        }
      ]
    },
    "cdk:bucketReplication": {
      "name": "cdk:bucketReplication",
      "steps": [
        {
          "exec": "cdk -a \"npx ts-node -P tsconfig.json --prefer-ts-exts src/BucketReplication.ts\"",
          "receiveArgs": true
        }
      ]
    },
    "cdk:github": {
      "name": "cdk:github",
      "steps": [
        {
          "exec": "cdk -a \"npx ts-node -P tsconfig.json --prefer-ts-exts src/GithubSupport.ts\"",
          "receiveArgs": true
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile"
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "deploy": {
      "name": "deploy",
      "description": "Deploys your CDK app to the AWS cloud",
      "steps": [
        {
          "exec": "cdk deploy",
          "receiveArgs": true
        }
      ]
    },
    "destroy": {
      "name": "destroy",
      "description": "Destroys your cdk app in the AWS cloud",
      "steps": [
        {
          "exec": "cdk destroy",
          "receiveArgs": true
        }
      ]
    },
    "diff": {
      "name": "diff",
      "description": "Diffs the currently deployed app against your code",
      "steps": [
        {
          "exec": "cdk diff"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools projenrc .projenrc.ts"
        }
      ]
    },
    "get-service-account-users": {
      "name": "get-service-account-users",
      "steps": [
        {
          "exec": "npx ts-node src/helpers/get-service-account-users.ts"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "integ": {
      "name": "integ",
      "description": "Run integration snapshot tests",
      "steps": [
        {
          "exec": "integ-runner $@ --language typescript",
          "receiveArgs": true
        }
      ]
    },
    "integ:update": {
      "name": "integ:update",
      "description": "Run and update integration snapshot tests",
      "steps": [
        {
          "exec": "integ-runner $@ --language typescript --update-on-failed",
          "receiveArgs": true
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package"
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "spawn": "synth:silent"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "synth": {
      "name": "synth",
      "description": "Synthesizes your cdk app into cdk.out",
      "steps": [
        {
          "exec": "cdk synth"
        }
      ]
    },
    "synth:silent": {
      "name": "synth:silent",
      "description": "Synthesizes your cdk app into cdk.out and suppresses the template in stdout (part of \"yarn build\")",
      "steps": [
        {
          "exec": "cdk synth -q"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        },
        {
          "spawn": "integ"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "yarn upgrade npm-check-updates"
        },
        {
          "exec": "npm-check-updates --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@types/jest,@types/node,@typescript-eslint/eslint-plugin,@typescript-eslint/parser,aws-cdk,esbuild,eslint-import-resolver-node,eslint-import-resolver-typescript,eslint-plugin-import,eslint,jest,jest-junit,npm-check-updates,projen,ts-jest,ts-node,typescript,@aws-cdk/aws-lambda-python-alpha,@aws-sdk/client-dynamodb,@aws-sdk/lib-dynamodb,@cdktf/aws-cdk,@matthewbonig/cdk-logical-id-mapper,@matthewbonig/state-machine,@types/uuid,@wheatstalk/cdk-intrinsic-validator,aws-cdk-github-oidc,aws-cdk-lib,aws-sdk,cdk-iam-floyd,cdk-nag,cdk-pipelines-github,constructs,datadog-cdk-constructs-v2,uuid"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser aws-cdk esbuild eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import eslint jest jest-junit npm-check-updates projen ts-jest ts-node typescript @aws-cdk/aws-lambda-python-alpha @aws-sdk/client-dynamodb @aws-sdk/lib-dynamodb @cdktf/aws-cdk @matthewbonig/cdk-logical-id-mapper @matthewbonig/state-machine @types/uuid @wheatstalk/cdk-intrinsic-validator aws-cdk-github-oidc aws-cdk-lib aws-sdk cdk-iam-floyd cdk-nag cdk-pipelines-github constructs datadog-cdk-constructs-v2 uuid"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watches changes in your source code and rebuilds and deploys to the current account",
      "steps": [
        {
          "exec": "cdk deploy --hotswap"
        },
        {
          "exec": "cdk watch"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
